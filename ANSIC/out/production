@1		cast_expression->unary_expression
@2		cast_expression->( type_name ) cast_expression
@3		compound_statement->{ compound_statement2
@4		type_name->specifier_qualifier_list type_name2
@5		init_declarator->declarator init_declarator2
@6		direct_declarator->IDENTIFIER direct_declarator1
@7		direct_declarator->( declarator ) direct_declarator1
@8		unary_expression->INC_OP unary_expression
@9		unary_expression->DEC_OP unary_expression
@10		unary_expression->unary_operator cast_expression
@11		unary_expression->primary_expression postfix_expression1
@12		unary_expression->SIZEOF unary_expression2
@13		struct_declaration_list->struct_declaration struct_declaration_list1
@14		and_expression->equality_expression and_expression1
@15		additive_expression->multiplicative_expression additive_expression1
@16		abstract_declarator->pointer abstract_declarator2
@17		direct_abstract_declarator->[ direct_abstract_declarator2
@18		direct_abstract_declarator->( direct_abstract_declarator22
@19		assignment_operator->=
@20		assignment_operator->MUL_ASSIGN
@21		assignment_operator->DIV_ASSIGN
@22		assignment_operator->MOD_ASSIGN
@23		assignment_operator->ADD_ASSIGN
@24		assignment_operator->SUB_ASSIGN
@25		assignment_operator->LEFT_ASSIGN
@26		assignment_operator->RIGHT_ASSIGN
@27		assignment_operator->AND_ASSIGN
@28		assignment_operator->XOR_ASSIGN
@29		assignment_operator->OR_ASSIGN
@30		multiplicative_expression->( type_name ) cast_expression multiplicative_expression1
@31		multiplicative_expression->INC_OP unary_expression multiplicative_expression1
@32		multiplicative_expression->DEC_OP unary_expression multiplicative_expression1
@33		multiplicative_expression->unary_operator cast_expression multiplicative_expression1
@34		multiplicative_expression->primary_expression postfix_expression1 multiplicative_expression1
@35		multiplicative_expression->SIZEOF multiplicative_expression2
@36		primary_expression->IDENTIFIER
@37		primary_expression->CONSTANT
@38		primary_expression->STRING_LITERAL
@39		primary_expression->( expression )
@40		pointer->* pointer2
@41		unary_operator->&
@42		unary_operator->*
@43		unary_operator->+
@44		unary_operator->-
@45		unary_operator->~
@46		unary_operator->!
@47		declaration_list->declaration declaration_list1
@48		identifier_list->IDENTIFIER identifier_list1
@49		enumerator_list->enumerator enumerator_list1
@50		exclusive_or_expression->equality_expression and_expression1 exclusive_or_expression1
@51		declaration_specifiers->storage_class_specifier declaration_specifiers2
@52		declaration_specifiers->type_specifier declaration_specifiers2
@53		declaration_specifiers->type_qualifier declaration_specifiers2
@54		type_qualifier_list->type_qualifier type_qualifier_list1
@55		struct_declarator->declarator struct_declarator2
@56		equality_expression->relational_expression equality_expression1
@57		initializer_list->initializer initializer_list1
@58		struct_declarator_list->declarator struct_declarator_list2
@59		parameter_type_list->parameter_list parameter_type_list2
@60		translation_unit->external_declaration translation_unit1
@61		init_declarator_list->declarator init_declarator_list2
@62		inclusive_or_expression->relational_expression equality_expression1 and_expression1 exclusive_or_expression1 inclusive_or_expression1
@63		conditional_expression->logical_and_expression logical_or_expression1 conditional_expression2
@64		constant_expression->logical_and_expression logical_or_expression1 constant_expression2
@65		specifier_qualifier_list->type_specifier specifier_qualifier_list2
@66		specifier_qualifier_list->type_qualifier specifier_qualifier_list2
@67		statement->labeled_statement
@68		statement->expression_statement
@69		statement->jump_statement
@70		statement->SWITCH ( expression ) statement
@71		statement->WHILE ( expression ) statement
@72		statement->DO statement WHILE ( expression ) ;
@73		statement->FOR ( expression_statement expression_statement statement2
@74		statement->IF ( expression ) statement statement222
@75		statement->{ statement2
@76		type_qualifier->CONST
@77		type_qualifier->VOLATILE
@78		shift_expression->INC_OP unary_expression multiplicative_expression1 additive_expression1 shift_expression1
@79		shift_expression->DEC_OP unary_expression multiplicative_expression1 additive_expression1 shift_expression1
@80		shift_expression->& cast_expression multiplicative_expression1 additive_expression1 shift_expression1
@81		shift_expression->* cast_expression multiplicative_expression1 additive_expression1 shift_expression1
@82		shift_expression->+ cast_expression multiplicative_expression1 additive_expression1 shift_expression1
@83		shift_expression->- cast_expression multiplicative_expression1 additive_expression1 shift_expression1
@84		shift_expression->~ cast_expression multiplicative_expression1 additive_expression1 shift_expression1
@85		shift_expression->! cast_expression multiplicative_expression1 additive_expression1 shift_expression1
@86		shift_expression->IDENTIFIER postfix_expression1 multiplicative_expression1 additive_expression1 shift_expression1
@87		shift_expression->CONSTANT postfix_expression1 multiplicative_expression1 additive_expression1 shift_expression1
@88		shift_expression->STRING_LITERAL postfix_expression1 multiplicative_expression1 additive_expression1 shift_expression1
@89		shift_expression->SIZEOF shift_expression2
@90		shift_expression->( shift_expression22
@91		enumerator->IDENTIFIER enumerator2
@92		labeled_statement->IDENTIFIER : statement
@93		labeled_statement->CASE constant_expression : statement
@94		labeled_statement->DEFAULT : statement
@95		statement_list->expression_statement statement_list1
@96		statement_list->jump_statement statement_list1
@97		statement_list->SWITCH ( expression ) statement statement_list1
@98		statement_list->WHILE ( expression ) statement statement_list1
@99		statement_list->DO statement WHILE ( expression ) ; statement_list1
@100		statement_list->IDENTIFIER : statement statement_list1
@101		statement_list->CASE constant_expression : statement statement_list1
@102		statement_list->DEFAULT : statement statement_list1
@103		statement_list->FOR ( expression_statement expression_statement statement_list2
@104		statement_list->IF ( expression ) statement statement_list222
@105		statement_list->{ statement_list2
@106		external_declaration->function_definition
@107		external_declaration->declaration
@108		expression->assignment_expression expression1
@109		type_specifier->VOID
@110		type_specifier->CHAR
@111		type_specifier->SHORT
@112		type_specifier->INT
@113		type_specifier->LONG
@114		type_specifier->FLOAT
@115		type_specifier->DOUBLE
@116		type_specifier->SIGNED
@117		type_specifier->UNSIGNED
@118		type_specifier->TYPE_NAME
@119		type_specifier->ENUM type_specifier2
@120		type_specifier->UNION type_specifier22
@121		type_specifier->STRUCT type_specifier22
@122		expression_statement->;
@123		expression_statement->assignment_expression expression1 ;
@124		argument_expression_list->assignment_expression argument_expression_list1
@125		parameter_declaration->VOID parameter_declaration2
@126		parameter_declaration->LONG parameter_declaration2
@127		parameter_declaration->CHAR parameter_declaration2
@128		parameter_declaration->storage_class_specifier parameter_declaration2
@129		parameter_declaration->TYPE_NAME parameter_declaration2
@130		parameter_declaration->SIGNED parameter_declaration2
@131		parameter_declaration->SHORT parameter_declaration2
@132		parameter_declaration->CONST parameter_declaration2
@133		parameter_declaration->FLOAT parameter_declaration2
@134		parameter_declaration->UNSIGNED parameter_declaration2
@135		parameter_declaration->INT parameter_declaration2
@136		parameter_declaration->DOUBLE parameter_declaration2
@137		parameter_declaration->VOLATILE parameter_declaration2
@138		parameter_declaration->ENUM parameter_declaration2
@139		parameter_declaration->UNION parameter_declaration22
@140		parameter_declaration->STRUCT parameter_declaration22
@141		assignment_expression->INC_OP unary_expression assignment_operator assignment_expression
@142		assignment_expression->DEC_OP unary_expression assignment_operator assignment_expression
@143		assignment_expression->& cast_expression assignment_operator assignment_expression
@144		assignment_expression->* cast_expression assignment_operator assignment_expression
@145		assignment_expression->+ cast_expression assignment_operator assignment_expression
@146		assignment_expression->- cast_expression assignment_operator assignment_expression
@147		assignment_expression->~ cast_expression assignment_operator assignment_expression
@148		assignment_expression->! cast_expression assignment_operator assignment_expression
@149		assignment_expression->IDENTIFIER postfix_expression1 assignment_operator assignment_expression
@150		assignment_expression->CONSTANT postfix_expression1 assignment_operator assignment_expression
@151		assignment_expression->STRING_LITERAL postfix_expression1 assignment_operator assignment_expression
@152		assignment_expression->( expression ) postfix_expression1 assignment_operator assignment_expression
@153		assignment_expression->SIZEOF assignment_expression2
@154		assignment_expression->logical_and_expression logical_or_expression1 assignment_expression22
@155		declaration->VOID declaration2
@156		declaration->LONG declaration2
@157		declaration->CHAR declaration2
@158		declaration->storage_class_specifier declaration2
@159		declaration->TYPE_NAME declaration2
@160		declaration->SIGNED declaration2
@161		declaration->SHORT declaration2
@162		declaration->CONST declaration2
@163		declaration->FLOAT declaration2
@164		declaration->UNSIGNED declaration2
@165		declaration->INT declaration2
@166		declaration->DOUBLE declaration2
@167		declaration->VOLATILE declaration2
@168		declaration->ENUM declaration2
@169		declaration->UNION declaration22
@170		declaration->STRUCT declaration22
@171		declarator->IDENTIFIER direct_declarator1
@172		declarator->( declarator ) direct_declarator1
@173		declarator->* declarator2
@174		initializer->INC_OP unary_expression assignment_operator assignment_expression
@175		initializer->DEC_OP unary_expression assignment_operator assignment_expression
@176		initializer->& cast_expression assignment_operator assignment_expression
@177		initializer->* cast_expression assignment_operator assignment_expression
@178		initializer->+ cast_expression assignment_operator assignment_expression
@179		initializer->- cast_expression assignment_operator assignment_expression
@180		initializer->~ cast_expression assignment_operator assignment_expression
@181		initializer->! cast_expression assignment_operator assignment_expression
@182		initializer->IDENTIFIER postfix_expression1 assignment_operator assignment_expression
@183		initializer->CONSTANT postfix_expression1 assignment_operator assignment_expression
@184		initializer->STRING_LITERAL postfix_expression1 assignment_operator assignment_expression
@185		initializer->( expression ) postfix_expression1 assignment_operator assignment_expression
@186		initializer->SIZEOF initializer2
@187		initializer->{ initializer_list initializer22
@188		initializer->logical_and_expression logical_or_expression1 initializer222
@189		struct_declaration->VOID struct_declaration2
@190		struct_declaration->LONG struct_declaration2
@191		struct_declaration->CHAR struct_declaration2
@192		struct_declaration->UNSIGNED struct_declaration2
@193		struct_declaration->TYPE_NAME struct_declaration2
@194		struct_declaration->SIGNED struct_declaration2
@195		struct_declaration->INT struct_declaration2
@196		struct_declaration->DOUBLE struct_declaration2
@197		struct_declaration->SHORT struct_declaration2
@198		struct_declaration->CONST struct_declaration2
@199		struct_declaration->VOLATILE struct_declaration2
@200		struct_declaration->FLOAT struct_declaration2
@201		struct_declaration->ENUM struct_declaration2
@202		struct_declaration->UNION struct_declaration22
@203		struct_declaration->STRUCT struct_declaration22
@204		storage_class_specifier->TYPEDEF
@205		storage_class_specifier->EXTERN
@206		storage_class_specifier->STATIC
@207		storage_class_specifier->AUTO
@208		storage_class_specifier->REGISTER
@209		logical_and_expression->relational_expression equality_expression1 and_expression1 exclusive_or_expression1 inclusive_or_expression1 logical_and_expression1
@210		relational_expression->INC_OP unary_expression multiplicative_expression1 additive_expression1 shift_expression1 relational_expression1
@211		relational_expression->DEC_OP unary_expression multiplicative_expression1 additive_expression1 shift_expression1 relational_expression1
@212		relational_expression->& cast_expression multiplicative_expression1 additive_expression1 shift_expression1 relational_expression1
@213		relational_expression->* cast_expression multiplicative_expression1 additive_expression1 shift_expression1 relational_expression1
@214		relational_expression->+ cast_expression multiplicative_expression1 additive_expression1 shift_expression1 relational_expression1
@215		relational_expression->- cast_expression multiplicative_expression1 additive_expression1 shift_expression1 relational_expression1
@216		relational_expression->~ cast_expression multiplicative_expression1 additive_expression1 shift_expression1 relational_expression1
@217		relational_expression->! cast_expression multiplicative_expression1 additive_expression1 shift_expression1 relational_expression1
@218		relational_expression->IDENTIFIER postfix_expression1 multiplicative_expression1 additive_expression1 shift_expression1 relational_expression1
@219		relational_expression->CONSTANT postfix_expression1 multiplicative_expression1 additive_expression1 shift_expression1 relational_expression1
@220		relational_expression->STRING_LITERAL postfix_expression1 multiplicative_expression1 additive_expression1 shift_expression1 relational_expression1
@221		relational_expression->SIZEOF relational_expression2
@222		relational_expression->( relational_expression22
@223		parameter_list->VOID parameter_list2
@224		parameter_list->LONG parameter_list2
@225		parameter_list->CHAR parameter_list2
@226		parameter_list->TYPE_NAME parameter_list2
@227		parameter_list->SIGNED parameter_list2
@228		parameter_list->EXTERN parameter_list2
@229		parameter_list->SHORT parameter_list2
@230		parameter_list->CONST parameter_list2
@231		parameter_list->REGISTER parameter_list2
@232		parameter_list->FLOAT parameter_list2
@233		parameter_list->STATIC parameter_list2
@234		parameter_list->UNSIGNED parameter_list2
@235		parameter_list->INT parameter_list2
@236		parameter_list->DOUBLE parameter_list2
@237		parameter_list->TYPEDEF parameter_list2
@238		parameter_list->AUTO parameter_list2
@239		parameter_list->VOLATILE parameter_list2
@240		parameter_list->ENUM parameter_list2
@241		parameter_list->UNION parameter_list22
@242		parameter_list->STRUCT parameter_list22
@243		jump_statement->GOTO IDENTIFIER ;
@244		jump_statement->CONTINUE ;
@245		jump_statement->BREAK ;
@246		jump_statement->RETURN jump_statement2
@247		function_definition->IDENTIFIER direct_declarator1 function_definition2
@248		function_definition->( declarator ) direct_declarator1 function_definition2
@249		function_definition->VOID function_definition2
@250		function_definition->LONG function_definition2
@251		function_definition->CHAR function_definition2
@252		function_definition->TYPE_NAME function_definition2
@253		function_definition->SIGNED function_definition2
@254		function_definition->EXTERN function_definition2
@255		function_definition->SHORT function_definition2
@256		function_definition->CONST function_definition2
@257		function_definition->REGISTER function_definition2
@258		function_definition->FLOAT function_definition2
@259		function_definition->STATIC function_definition2
@260		function_definition->UNSIGNED function_definition2
@261		function_definition->INT function_definition2
@262		function_definition->DOUBLE function_definition2
@263		function_definition->TYPEDEF function_definition2
@264		function_definition->AUTO function_definition2
@265		function_definition->VOLATILE function_definition2
@266		function_definition->* function_definition222
@267		function_definition->ENUM function_definition2
@268		function_definition->UNION function_definition22
@269		function_definition->STRUCT function_definition22
@270		postfix_expression1->[ expression ] postfix_expression1
@271		postfix_expression1->. IDENTIFIER postfix_expression1
@272		postfix_expression1->PTR_OP IDENTIFIER postfix_expression1
@273		postfix_expression1->INC_OP postfix_expression1
@274		postfix_expression1->DEC_OP postfix_expression1
@275		postfix_expression1->ε
@276		postfix_expression1->( postfix_expression12
@277		direct_declarator1->ε
@278		direct_declarator1->[ direct_declarator12
@279		direct_declarator1->( direct_declarator122
@280		logical_or_expression1->OR_OP logical_and_expression logical_or_expression1
@281		logical_or_expression1->ε
@282		struct_declaration_list1->ε
@283		struct_declaration_list1->VOID struct_declaration_list12
@284		struct_declaration_list1->LONG struct_declaration_list12
@285		struct_declaration_list1->CHAR struct_declaration_list12
@286		struct_declaration_list1->UNSIGNED struct_declaration_list12
@287		struct_declaration_list1->TYPE_NAME struct_declaration_list12
@288		struct_declaration_list1->SIGNED struct_declaration_list12
@289		struct_declaration_list1->INT struct_declaration_list12
@290		struct_declaration_list1->DOUBLE struct_declaration_list12
@291		struct_declaration_list1->SHORT struct_declaration_list12
@292		struct_declaration_list1->CONST struct_declaration_list12
@293		struct_declaration_list1->VOLATILE struct_declaration_list12
@294		struct_declaration_list1->FLOAT struct_declaration_list12
@295		struct_declaration_list1->ENUM struct_declaration_list12
@296		struct_declaration_list1->UNION struct_declaration_list122
@297		struct_declaration_list1->STRUCT struct_declaration_list122
@298		and_expression1->& equality_expression and_expression1
@299		and_expression1->ε
@300		additive_expression1->+ multiplicative_expression additive_expression1
@301		additive_expression1->- multiplicative_expression additive_expression1
@302		additive_expression1->ε
@303		direct_abstract_declarator1->] direct_abstract_declarator1
@304		direct_abstract_declarator1->constant_expression ] direct_abstract_declarator1
@305		direct_abstract_declarator1->) direct_abstract_declarator1
@306		direct_abstract_declarator1->parameter_type_list ) direct_abstract_declarator1
@307		direct_abstract_declarator1->ε
@308		multiplicative_expression1->* cast_expression multiplicative_expression1
@309		multiplicative_expression1->/ cast_expression multiplicative_expression1
@310		multiplicative_expression1->% cast_expression multiplicative_expression1
@311		multiplicative_expression1->ε
@312		declaration_list1->ε
@313		declaration_list1->VOID declaration_list12
@314		declaration_list1->LONG declaration_list12
@315		declaration_list1->CHAR declaration_list12
@316		declaration_list1->TYPE_NAME declaration_list12
@317		declaration_list1->SIGNED declaration_list12
@318		declaration_list1->EXTERN declaration_list12
@319		declaration_list1->SHORT declaration_list12
@320		declaration_list1->CONST declaration_list12
@321		declaration_list1->REGISTER declaration_list12
@322		declaration_list1->FLOAT declaration_list12
@323		declaration_list1->STATIC declaration_list12
@324		declaration_list1->UNSIGNED declaration_list12
@325		declaration_list1->INT declaration_list12
@326		declaration_list1->DOUBLE declaration_list12
@327		declaration_list1->TYPEDEF declaration_list12
@328		declaration_list1->AUTO declaration_list12
@329		declaration_list1->VOLATILE declaration_list12
@330		declaration_list1->ENUM declaration_list12
@331		declaration_list1->UNION declaration_list122
@332		declaration_list1->STRUCT declaration_list122
@333		identifier_list1->, IDENTIFIER identifier_list1
@334		identifier_list1->ε
@335		enumerator_list1->, enumerator enumerator_list1
@336		enumerator_list1->ε
@337		exclusive_or_expression1->^ and_expression exclusive_or_expression1
@338		exclusive_or_expression1->ε
@339		type_qualifier_list1->ε
@340		type_qualifier_list1->CONST type_qualifier_list1
@341		type_qualifier_list1->VOLATILE type_qualifier_list1
@342		equality_expression1->EQ_OP relational_expression equality_expression1
@343		equality_expression1->NE_OP relational_expression equality_expression1
@344		equality_expression1->ε
@345		initializer_list1->, initializer initializer_list1
@346		initializer_list1->ε
@347		struct_declarator_list1->, struct_declarator struct_declarator_list1
@348		struct_declarator_list1->ε
@349		translation_unit1->ε
@350		translation_unit1->IDENTIFIER direct_declarator1 translation_unit12
@351		translation_unit1->( declarator ) direct_declarator1 translation_unit12
@352		translation_unit1->* translation_unit12
@353		translation_unit1->VOID translation_unit122
@354		translation_unit1->LONG translation_unit122
@355		translation_unit1->CHAR translation_unit122
@356		translation_unit1->TYPE_NAME translation_unit122
@357		translation_unit1->SIGNED translation_unit122
@358		translation_unit1->EXTERN translation_unit122
@359		translation_unit1->SHORT translation_unit122
@360		translation_unit1->CONST translation_unit122
@361		translation_unit1->REGISTER translation_unit122
@362		translation_unit1->FLOAT translation_unit122
@363		translation_unit1->STATIC translation_unit122
@364		translation_unit1->UNSIGNED translation_unit122
@365		translation_unit1->INT translation_unit122
@366		translation_unit1->DOUBLE translation_unit122
@367		translation_unit1->TYPEDEF translation_unit122
@368		translation_unit1->AUTO translation_unit122
@369		translation_unit1->VOLATILE translation_unit122
@370		translation_unit1->ENUM translation_unit12
@371		translation_unit1->UNION translation_unit122
@372		translation_unit1->STRUCT translation_unit122
@373		init_declarator_list1->, init_declarator init_declarator_list1
@374		init_declarator_list1->ε
@375		inclusive_or_expression1->| exclusive_or_expression inclusive_or_expression1
@376		inclusive_or_expression1->ε
@377		shift_expression1->LEFT_OP additive_expression shift_expression1
@378		shift_expression1->RIGHT_OP additive_expression shift_expression1
@379		shift_expression1->ε
@380		statement_list1->ε
@381		statement_list1->SWITCH ( expression ) statement statement_list1
@382		statement_list1->WHILE ( expression ) statement statement_list1
@383		statement_list1->DO statement WHILE ( expression ) ; statement_list1
@384		statement_list1->CASE constant_expression : statement statement_list1
@385		statement_list1->DEFAULT : statement statement_list1
@386		statement_list1->GOTO IDENTIFIER ; statement_list1
@387		statement_list1->CONTINUE ; statement_list1
@388		statement_list1->BREAK ; statement_list1
@389		statement_list1->IF ( expression ) statement statement_list122
@390		statement_list1->FOR ( expression_statement expression_statement statement_list1222
@391		statement_list1->RETURN statement_list12222
@392		statement_list1->INC_OP unary_expression statement_list12
@393		statement_list1->~ cast_expression statement_list12
@394		statement_list1->DEC_OP unary_expression statement_list12
@395		statement_list1->STRING_LITERAL postfix_expression1 statement_list12
@396		statement_list1->* cast_expression statement_list12
@397		statement_list1->CONSTANT postfix_expression1 statement_list12
@398		statement_list1->- cast_expression statement_list12
@399		statement_list1->! cast_expression statement_list12
@400		statement_list1->+ cast_expression statement_list12
@401		statement_list1->& cast_expression statement_list12
@402		statement_list1->{ statement_list122
@403		statement_list1->IDENTIFIER statement_list12
@404		statement_list1->SIZEOF statement_list122
@405		statement_list1->( statement_list1222
@406		expression1->, assignment_expression expression1
@407		expression1->ε
@408		argument_expression_list1->, assignment_expression argument_expression_list1
@409		argument_expression_list1->ε
@410		logical_and_expression1->AND_OP inclusive_or_expression logical_and_expression1
@411		logical_and_expression1->ε
@412		relational_expression1->< shift_expression relational_expression1
@413		relational_expression1->> shift_expression relational_expression1
@414		relational_expression1->LE_OP shift_expression relational_expression1
@415		relational_expression1->GE_OP shift_expression relational_expression1
@416		relational_expression1->ε
@417		parameter_list1->, parameter_declaration parameter_list1
@418		parameter_list1->ε
@419		compound_statement2->}
@420		compound_statement2->statement_list }
@421		type_name2->ε
@422		type_name2->abstract_declarator
@423		init_declarator2->ε
@424		init_declarator2->= initializer
@425		unary_expression2->unary_expression
@426		unary_expression2->( type_name )
@427		abstract_declarator2->ε
@428		abstract_declarator2->direct_abstract_declarator
@429		direct_abstract_declarator2->] direct_abstract_declarator1
@430		direct_abstract_declarator2->constant_expression ] direct_abstract_declarator1
@431		direct_abstract_declarator22->abstract_declarator ) direct_abstract_declarator1
@432		direct_abstract_declarator22->) direct_abstract_declarator1
@433		direct_abstract_declarator22->parameter_type_list ) direct_abstract_declarator1
@434		multiplicative_expression2->unary_expression multiplicative_expression1
@435		multiplicative_expression2->( type_name ) multiplicative_expression1
@436		pointer2->ε
@437		pointer2->pointer
@438		declaration_specifiers2->ε
@439		declaration_specifiers2->declaration_specifiers
@440		struct_declarator2->ε
@441		struct_declarator2->: constant_expression
@442		struct_declarator_list2->struct_declarator_list1
@443		struct_declarator_list2->: constant_expression struct_declarator_list1
@444		parameter_type_list2->ε
@445		parameter_type_list2->, ELLIPSIS
@446		init_declarator_list2->init_declarator_list1
@447		init_declarator_list2->= initializer init_declarator_list1
@448		conditional_expression2->ε
@449		conditional_expression2->? expression : conditional_expression
@450		constant_expression2->ε
@451		constant_expression2->? expression : conditional_expression
@452		specifier_qualifier_list2->specifier_qualifier_list
@453		specifier_qualifier_list2->ε
@454		statement2->) statement
@455		statement2->expression ) statement
@456		statement22->}
@457		statement22->statement_list }
@458		statement222->ε
@459		statement222->ELSE statement
@460		shift_expression2->unary_expression multiplicative_expression1 additive_expression1 shift_expression1
@461		shift_expression2->( type_name ) multiplicative_expression1 additive_expression1 shift_expression1
@462		shift_expression22->type_name ) cast_expression multiplicative_expression1 additive_expression1 shift_expression1
@463		shift_expression22->expression ) postfix_expression1 multiplicative_expression1 additive_expression1 shift_expression1
@464		enumerator2->ε
@465		enumerator2->= constant_expression
@466		statement_list2->) statement statement_list1
@467		statement_list2->expression ) statement statement_list1
@468		statement_list22->} statement_list1
@469		statement_list22->statement_list } statement_list1
@470		statement_list222->statement_list1
@471		statement_list222->ELSE statement statement_list1
@472		type_specifier2->{ enumerator_list }
@473		type_specifier2->ε
@474		type_specifier22->ε
@475		type_specifier22->{ struct_declaration_list }
@476		parameter_declaration2->declarator
@477		parameter_declaration2->ε
@478		parameter_declaration2->abstract_declarator
@479		parameter_declaration22->{ struct_declaration_list } parameter_declaration2
@480		parameter_declaration22->declarator
@481		parameter_declaration22->abstract_declarator
@482		parameter_declaration22->ε
@483		parameter_declaration22->declaration_specifiers parameter_declaration2
@484		assignment_expression2->unary_expression assignment_operator assignment_expression
@485		assignment_expression2->( type_name ) assignment_operator assignment_expression
@486		assignment_expression22->ε
@487		assignment_expression22->? expression : conditional_expression
@488		declaration2->;
@489		declaration2->init_declarator_list ;
@490		declaration22->;
@491		declaration22->init_declarator_list ;
@492		declaration22->declaration_specifiers declaration2
@493		declaration22->{ struct_declaration_list } declaration2
@494		declarator2->direct_declarator
@495		declarator2->pointer direct_declarator
@496		initializer2->unary_expression assignment_operator assignment_expression
@497		initializer2->( type_name ) assignment_operator assignment_expression
@498		initializer22->}
@499		initializer22->, }
@500		initializer222->ε
@501		initializer222->? expression : conditional_expression
@502		struct_declaration2->specifier_qualifier_list struct_declarator_list ;
@503		struct_declaration2->struct_declarator_list ;
@504		struct_declaration22->specifier_qualifier_list struct_declarator_list ;
@505		struct_declaration22->struct_declarator_list ;
@506		struct_declaration22->{ struct_declaration_list } struct_declaration2
@507		relational_expression2->unary_expression multiplicative_expression1 additive_expression1 shift_expression1 relational_expression1
@508		relational_expression2->( type_name ) multiplicative_expression1 additive_expression1 shift_expression1 relational_expression1
@509		relational_expression22->type_name ) cast_expression multiplicative_expression1 additive_expression1 shift_expression1 relational_expression1
@510		relational_expression22->expression ) postfix_expression1 multiplicative_expression1 additive_expression1 shift_expression1 relational_expression1
@511		parameter_list2->declarator parameter_list1
@512		parameter_list2->parameter_list1
@513		parameter_list2->abstract_declarator parameter_list1
@514		parameter_list22->{ struct_declaration_list } parameter_list2
@515		parameter_list22->declarator parameter_list1
@516		parameter_list22->abstract_declarator parameter_list1
@517		parameter_list22->parameter_list1
@518		parameter_list22->declaration_specifiers parameter_list2
@519		jump_statement2->;
@520		jump_statement2->expression ;
@521		function_definition2->declaration_list compound_statement
@522		function_definition2->compound_statement
@523		function_definition22->pointer direct_declarator function_definition2
@524		function_definition22->direct_declarator function_definition2
@525		function_definition222->direct_declarator function_definition2
@526		function_definition222->type_qualifier_list function_definition22
@527		function_definition222->pointer direct_declarator function_definition2
@528		postfix_expression12->) postfix_expression1
@529		postfix_expression12->argument_expression_list ) postfix_expression1
@530		direct_declarator12->constant_expression ] direct_declarator1
@531		direct_declarator12->] direct_declarator1
@532		direct_declarator122->parameter_type_list ) direct_declarator1
@533		direct_declarator122->identifier_list ) direct_declarator1
@534		direct_declarator122->) direct_declarator1
@535		struct_declaration_list12->specifier_qualifier_list struct_declarator_list ; struct_declaration_list1
@536		struct_declaration_list12->struct_declarator_list ; struct_declaration_list1
@537		struct_declaration_list122->specifier_qualifier_list struct_declarator_list ; struct_declaration_list1
@538		struct_declaration_list122->struct_declarator_list ; struct_declaration_list1
@539		struct_declaration_list122->{ struct_declaration_list } struct_declaration_list12
@540		declaration_list12->; declaration_list1
@541		declaration_list12->init_declarator_list ; declaration_list1
@542		declaration_list122->; declaration_list1
@543		declaration_list122->init_declarator_list ; declaration_list1
@544		declaration_list122->declaration_specifiers declaration_list12
@545		declaration_list122->{ struct_declaration_list } declaration_list12
@546		translation_unit12->declaration_list compound_statement translation_unit1
@547		translation_unit12->compound_statement translation_unit1
@548		translation_unit122->; translation_unit1
@549		translation_unit122->declarator translation_unit12
@550		translation_unit122->init_declarator_list ; translation_unit1
@551		statement_list12->? expression : conditional_expression expression1 ; statement_list1
@552		statement_list12->expression1 ; statement_list1
@553		statement_list122->statement_list1
@554		statement_list122->ELSE statement statement_list1
@555		statement_list1222->) statement statement_list1
@556		statement_list1222->expression ) statement statement_list1
@557		statement_list12222->; statement_list1
@558		statement_list12222->expression ; statement_list1
@559		statement_list122222->} statement_list1
@560		statement_list122222->statement_list } statement_list1
