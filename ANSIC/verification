primary_expression
nullable:No
firsts:IDENTIFIER,CONSTANT,STRING_LITERAL,(
follows:DEC_OP,INC_OP,PTR_OP,.,(,[,=,MUL_ASSIGN,DIV_ASSIGN,MOD_ASSIGN,ADD_ASSIGN,SUB_ASSIGN,LEFT_ASSIGN,RIGHT_ASSIGN,AND_ASSIGN,XOR_ASSIGN,OR_ASSIGN,%,/,*,+,-,RIGHT_OP,LEFT_OP,<,>,LE_OP,GE_OP,NE_OP,EQ_OP,&,^,|,AND_OP,OR_OP,?,,,),;,],:,}

postfix_expression
nullable:No
firsts:IDENTIFIER,CONSTANT,STRING_LITERAL,(
follows:[,(,.,PTR_OP,INC_OP,DEC_OP,OR_ASSIGN,XOR_ASSIGN,AND_ASSIGN,RIGHT_ASSIGN,LEFT_ASSIGN,SUB_ASSIGN,ADD_ASSIGN,MOD_ASSIGN,DIV_ASSIGN,MUL_ASSIGN,=,*,/,%,-,+,LEFT_OP,RIGHT_OP,GE_OP,LE_OP,>,<,EQ_OP,NE_OP,&,^,|,AND_OP,OR_OP,?,),,,},:,],;

argument_expression_list
nullable:No
firsts:IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF
follows:),,

unary_expression
nullable:No
firsts:IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF
follows:=,MUL_ASSIGN,DIV_ASSIGN,MOD_ASSIGN,ADD_ASSIGN,SUB_ASSIGN,LEFT_ASSIGN,RIGHT_ASSIGN,AND_ASSIGN,XOR_ASSIGN,OR_ASSIGN,%,/,*,+,-,RIGHT_OP,LEFT_OP,<,>,LE_OP,GE_OP,NE_OP,EQ_OP,&,^,|,AND_OP,OR_OP,?,,,),;,],:,}

unary_operator
nullable:No
firsts:&,*,+,-,~,!
follows:IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF

cast_expression
nullable:No
firsts:IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF
follows:*,/,%,OR_ASSIGN,XOR_ASSIGN,AND_ASSIGN,RIGHT_ASSIGN,LEFT_ASSIGN,SUB_ASSIGN,ADD_ASSIGN,MOD_ASSIGN,DIV_ASSIGN,MUL_ASSIGN,=,-,+,LEFT_OP,RIGHT_OP,GE_OP,LE_OP,>,<,EQ_OP,NE_OP,&,^,|,AND_OP,OR_OP,?,),,,},:,],;

multiplicative_expression
nullable:No
firsts:IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF
follows:*,/,%,+,-,RIGHT_OP,LEFT_OP,<,>,LE_OP,GE_OP,NE_OP,EQ_OP,&,^,|,AND_OP,OR_OP,?,,,),;,],:,}

additive_expression
nullable:No
firsts:IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF
follows:+,-,LEFT_OP,RIGHT_OP,GE_OP,LE_OP,>,<,EQ_OP,NE_OP,&,^,|,AND_OP,OR_OP,?,),,,},:,],;

shift_expression
nullable:No
firsts:IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF
follows:LEFT_OP,RIGHT_OP,<,>,LE_OP,GE_OP,NE_OP,EQ_OP,&,^,|,AND_OP,OR_OP,?,,,),;,],:,}

relational_expression
nullable:No
firsts:IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF
follows:<,>,LE_OP,GE_OP,EQ_OP,NE_OP,&,^,|,AND_OP,OR_OP,?,),,,},:,],;

equality_expression
nullable:No
firsts:IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF
follows:EQ_OP,NE_OP,&,^,|,AND_OP,OR_OP,?,,,),;,],:,}

and_expression
nullable:No
firsts:IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF
follows:&,^,|,AND_OP,OR_OP,?,),,,},:,],;

exclusive_or_expression
nullable:No
firsts:IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF
follows:^,|,AND_OP,OR_OP,?,,,),;,],:,}

inclusive_or_expression
nullable:No
firsts:IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF
follows:|,AND_OP,OR_OP,?,),,,},:,],;

logical_and_expression
nullable:No
firsts:IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF
follows:AND_OP,OR_OP,?,,,),;,],:,}

logical_or_expression
nullable:No
firsts:IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF
follows:OR_OP,?,),,,},:,],;

conditional_expression
nullable:No
firsts:IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF
follows:,,),;,],:,}

assignment_expression
nullable:No
firsts:IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF
follows:),,,:,],;,}

assignment_operator
nullable:No
firsts:=,MUL_ASSIGN,DIV_ASSIGN,MOD_ASSIGN,ADD_ASSIGN,SUB_ASSIGN,LEFT_ASSIGN,RIGHT_ASSIGN,AND_ASSIGN,XOR_ASSIGN,OR_ASSIGN
follows:IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF

expression
nullable:No
firsts:IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF
follows:),],:,,,;

constant_expression
nullable:No
firsts:IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF
follows:,,;,},],:

declaration
nullable:No
firsts:TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE
follows:RETURN,BREAK,CONTINUE,GOTO,FOR,DO,WHILE,SWITCH,IF,SIZEOF,!,~,-,+,*,&,DEC_OP,INC_OP,(,STRING_LITERAL,CONSTANT,;,{,DEFAULT,CASE,IDENTIFIER,},VOLATILE,CONST,TYPE_NAME,ENUM,UNION,STRUCT,UNSIGNED,SIGNED,DOUBLE,FLOAT,LONG,INT,SHORT,CHAR,VOID,REGISTER,AUTO,STATIC,EXTERN,TYPEDEF,$end

declaration_specifiers
nullable:No
firsts:TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE
follows:;,*,IDENTIFIER,(,[,),,

init_declarator_list
nullable:No
firsts:*,IDENTIFIER,(
follows:;,,

init_declarator
nullable:No
firsts:*,IDENTIFIER,(
follows:;,,

storage_class_specifier
nullable:No
firsts:TYPEDEF,EXTERN,STATIC,AUTO,REGISTER
follows:(,IDENTIFIER,*,;,TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,,,),[

type_specifier
nullable:No
firsts:VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME
follows:(,IDENTIFIER,*,;,TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,:,,,),[

struct_or_union_specifier
nullable:No
firsts:STRUCT,UNION
follows:VOLATILE,CONST,TYPE_NAME,ENUM,UNION,STRUCT,UNSIGNED,SIGNED,DOUBLE,FLOAT,LONG,INT,SHORT,CHAR,VOID,REGISTER,AUTO,STATIC,EXTERN,TYPEDEF,;,*,IDENTIFIER,(,[,),,,:

struct_or_union
nullable:No
firsts:STRUCT,UNION
follows:IDENTIFIER,{

struct_declaration_list
nullable:No
firsts:VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE
follows:},VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE

struct_declaration
nullable:No
firsts:VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE
follows:},VOLATILE,CONST,TYPE_NAME,ENUM,UNION,STRUCT,UNSIGNED,SIGNED,DOUBLE,FLOAT,LONG,INT,SHORT,CHAR,VOID

specifier_qualifier_list
nullable:No
firsts:VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE
follows:*,IDENTIFIER,(,:,),[

struct_declarator_list
nullable:No
firsts:*,IDENTIFIER,(,:
follows:;,,

struct_declarator
nullable:No
firsts:*,IDENTIFIER,(,:
follows:;,,

enum_specifier
nullable:No
firsts:ENUM
follows:VOLATILE,CONST,TYPE_NAME,ENUM,UNION,STRUCT,UNSIGNED,SIGNED,DOUBLE,FLOAT,LONG,INT,SHORT,CHAR,VOID,REGISTER,AUTO,STATIC,EXTERN,TYPEDEF,;,*,IDENTIFIER,(,[,),,,:

enumerator_list
nullable:No
firsts:IDENTIFIER
follows:},,

enumerator
nullable:No
firsts:IDENTIFIER
follows:},,

type_qualifier
nullable:No
firsts:CONST,VOLATILE
follows:(,IDENTIFIER,*,;,TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,:,,,),[

declarator
nullable:No
firsts:*,IDENTIFIER,(
follows:,,;,=,:,),TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,{

direct_declarator
nullable:No
firsts:IDENTIFIER,(
follows::,=,;,,,[,(,{,VOLATILE,CONST,TYPE_NAME,ENUM,UNION,STRUCT,UNSIGNED,SIGNED,DOUBLE,FLOAT,LONG,INT,SHORT,CHAR,VOID,REGISTER,AUTO,STATIC,EXTERN,TYPEDEF,)

pointer
nullable:No
firsts:*
follows:IDENTIFIER,(,,,),[

type_qualifier_list
nullable:No
firsts:CONST,VOLATILE
follows:(,IDENTIFIER,*,CONST,VOLATILE,[,),,

parameter_type_list
nullable:No
firsts:TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE
follows:)

parameter_list
nullable:No
firsts:TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE
follows:),,

parameter_declaration
nullable:No
firsts:TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE
follows:,,)

identifier_list
nullable:No
firsts:IDENTIFIER
follows:),,

type_name
nullable:No
firsts:VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE
follows:)

abstract_declarator
nullable:No
firsts:*,(,[
follows:),,

direct_abstract_declarator
nullable:No
firsts:(,[
follows:,,),[,(

initializer
nullable:No
firsts:IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF,{
follows:,,;,}

initializer_list
nullable:No
firsts:IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF,{
follows:},,

statement
nullable:No
firsts:IDENTIFIER,CASE,DEFAULT,{,;,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF,IF,SWITCH,WHILE,DO,FOR,GOTO,CONTINUE,BREAK,RETURN
follows:},RETURN,BREAK,CONTINUE,GOTO,FOR,DO,WHILE,SWITCH,IF,SIZEOF,!,~,-,+,*,&,DEC_OP,INC_OP,(,STRING_LITERAL,CONSTANT,;,{,DEFAULT,CASE,IDENTIFIER,ELSE

labeled_statement
nullable:No
firsts:IDENTIFIER,CASE,DEFAULT
follows:ELSE,IDENTIFIER,CASE,DEFAULT,{,;,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF,IF,SWITCH,WHILE,DO,FOR,GOTO,CONTINUE,BREAK,RETURN,}

compound_statement
nullable:No
firsts:{
follows:$end,(,IDENTIFIER,*,VOLATILE,CONST,TYPE_NAME,ENUM,UNION,STRUCT,UNSIGNED,SIGNED,DOUBLE,FLOAT,LONG,INT,SHORT,CHAR,VOID,REGISTER,AUTO,STATIC,EXTERN,TYPEDEF,ELSE,CASE,DEFAULT,{,;,CONSTANT,STRING_LITERAL,INC_OP,DEC_OP,&,+,-,~,!,SIZEOF,IF,SWITCH,WHILE,DO,FOR,GOTO,CONTINUE,BREAK,RETURN,}

declaration_list
nullable:No
firsts:TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE
follows:},IDENTIFIER,CASE,DEFAULT,{,;,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF,IF,SWITCH,WHILE,DO,FOR,GOTO,CONTINUE,BREAK,RETURN,TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE

statement_list
nullable:No
firsts:IDENTIFIER,CASE,DEFAULT,{,;,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF,IF,SWITCH,WHILE,DO,FOR,GOTO,CONTINUE,BREAK,RETURN
follows:},IDENTIFIER,CASE,DEFAULT,{,;,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF,IF,SWITCH,WHILE,DO,FOR,GOTO,CONTINUE,BREAK,RETURN

expression_statement
nullable:No
firsts:;,IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF
follows:;,IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF,),ELSE,CASE,DEFAULT,{,IF,SWITCH,WHILE,DO,FOR,GOTO,CONTINUE,BREAK,RETURN,}

selection_statement
nullable:No
firsts:IF,SWITCH
follows:ELSE,IDENTIFIER,CASE,DEFAULT,{,;,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF,IF,SWITCH,WHILE,DO,FOR,GOTO,CONTINUE,BREAK,RETURN,}

iteration_statement
nullable:No
firsts:WHILE,DO,FOR
follows:ELSE,IDENTIFIER,CASE,DEFAULT,{,;,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF,IF,SWITCH,WHILE,DO,FOR,GOTO,CONTINUE,BREAK,RETURN,}

jump_statement
nullable:No
firsts:GOTO,CONTINUE,BREAK,RETURN
follows:ELSE,IDENTIFIER,CASE,DEFAULT,{,;,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF,IF,SWITCH,WHILE,DO,FOR,GOTO,CONTINUE,BREAK,RETURN,}

translation_unit
nullable:No
firsts:TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,*,IDENTIFIER,(
follows:$end,TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,*,IDENTIFIER,(

external_declaration
nullable:No
firsts:TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,*,IDENTIFIER,(
follows:$end,(,IDENTIFIER,*,VOLATILE,CONST,TYPE_NAME,ENUM,UNION,STRUCT,UNSIGNED,SIGNED,DOUBLE,FLOAT,LONG,INT,SHORT,CHAR,VOID,REGISTER,AUTO,STATIC,EXTERN,TYPEDEF

function_definition
nullable:No
firsts:TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,*,IDENTIFIER,(
follows:TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,*,IDENTIFIER,(,$end

$accept
nullable:No
firsts:TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,*,IDENTIFIER,(
follows: